// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator zod {
    provider = "prisma-zod-generator"
    output   = "../generated/zod"
}

generator dbml {
    provider = "prisma-dbml-generator"
    output   = "../generated/dbml"
}

enum GenderEnum {
    M
    F
}

enum HabitEnum {
    NEVER
    SOMETIMES
    FREQUENTLY
}

enum AvatarStatusEnum {
    ACTIVE
    DELETED
}

enum BalanceLogEventEnum {
    ADD_FRIEND
    ADMIN
    CREATE_ROOM
    PURCHASE
    VOICE_CHAT
    PRIVATE_CHAT
    GIFT
}

enum RoomTypeEnum {
    TEXT
    VOICE
}

enum RoomStatusEnum {
    ACTIVE
    EXPIRED
}

enum SystemMessageTypeEnum {
    JOIN
    LEAVE
    GIFT
}

enum CurrencyEnum {
    HKD
}

enum PaymentMethodEnum {
    STRIPE
}

enum PaymentStatusEnum {
    SUCCESS
    PENDING
    FAILED
    REFUNDED
}

enum NotificationActionEnum {
    NAVIGATE_OTHER_USER_PROFILE
    NAVIGATE_MY_PROFILE
    URL
}

model User {
    // common fields of all models
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // constants fields that must not change
    clerkUserId String @unique

    // data values
    name          String?
    email         String?
    dob           DateTime?
    gender        GenderEnum?
    weight        Int?
    height        Int?
    smokingHabit  HabitEnum?
    drinkingHabit HabitEnum?
    introduction  String?

    creditBalance    Int @default(0)
    charm            Int @default(0)
    addFriendFlowers Int @default(10)

    // foreign keys and relations
    interests             String[]
    balanceLogs           BalanceLog[]
    createdRooms          Room[]
    roomLogs              RoomLog[]
    chatMessages          ChatMessage[]
    payments              Payment[]
    avatars               UserAvatar[]
    friendsAdded          Friend[]       @relation("adderUser")
    friendsAddBy          Friend[]       @relation("addedUser")
    privateRoomAdded      PrivateChat[]  @relation("adderUser")
    privateRoomAddBy      PrivateChat[]  @relation("addedUser")
    sentGifts             GiftLog[]      @relation("senderUser")
    receivedGifts         GiftLog[]      @relation("receiverUser")
    receivedNotifications Notification[] @relation("receiverUser")
    pushTokens            PushToken[]

    @@index(fields: [email])
    @@index(fields: [gender])
}

model UserAvatar {
    // common fields of all models
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // data values
    url    String
    status AvatarStatusEnum @default(ACTIVE)

    user   User    @relation(fields: [userId], references: [id])
    userId String
    upload Upload?
}

model Friend {
    // common fields of all models
    id               String   @id @default(uuid())
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    addFriendFlowers Int

    // foreign keys and relations
    adderUser   User        @relation("adderUser", fields: [adderUserId], references: [id])
    adderUserId String
    addedUser   User        @relation("addedUser", fields: [addedUserId], references: [id])
    addedUserId String
    balanceLog  BalanceLog?

    // @@unique sort from Prisma does not work as expected
    uniqueKey String @unique

    @@index([adderUserId(sort: Asc), addedUserId(sort: Desc)])
}

model BalanceLog {
    // common fields of all models
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // data values
    event        BalanceLogEventEnum
    creditAmount Int

    // foreign keys and relations
    payment          Payment?
    giftLog          GiftLog?
    user             User         @relation(fields: [userId], references: [id])
    userId           String
    friend           Friend?      @relation(fields: [friendId], references: [id])
    friendId         String?      @unique
    balanceRoomLog   RoomLog?     @relation(fields: [balanceRoomLogId], references: [id])
    balanceRoomLogId String?      @unique
    chatMessage      ChatMessage? @relation(fields: [chatMessageId], references: [id])
    chatMessageId    String?      @unique
}

model Upload {
    // common fields of all models
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // data values
    url String

    // foreign keys and relations
    userAvatar    UserAvatar?  @relation(fields: [userAvatarId], references: [id])
    userAvatarId  String?      @unique
    chatMessage   ChatMessage? @relation(fields: [chatMessageId], references: [id])
    chatMessageId String?      @unique
}

model Room {
    // common fields of all models
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // data values
    title                String
    emoji                String
    type                 RoomTypeEnum
    location             String?
    maleCapacity         Int
    femaleCapacity       Int
    filledMaleCapacity   Int             @default(0)
    filledFemaleCapacity Int             @default(0)
    status               RoomStatusEnum? @default(ACTIVE)
    expireAt             DateTime?
    isOfficial           Boolean

    // foreign keys and relations
    creatorUser   User?   @relation(fields: [creatorUserId], references: [id])
    creatorUserId String?

    roomLogs     RoomLog[]
    chatMessages ChatMessage[]

    @@index(fields: [type])
    @@index(fields: [status])
}

model RoomLog {
    // common fields of all models
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // data values
    roomType             RoomTypeEnum
    userName             String
    userAvatarUrl        String?
    userGender           GenderEnum
    userAddFriendFlowers Int          @default(10)
    leaveAt              DateTime?
    // Maximum possible value from Agora (2^32) is larger than Int4 limit
    agoraUserId          BigInt?

    // foreign keys and relations
    logRoom        Room          @relation(fields: [logRoomId], references: [id])
    logRoomId      String
    logUser        User          @relation(fields: [logUserId], references: [id])
    logUserId      String
    systemMessages ChatMessage[]
    balanceLog     BalanceLog?
}

model Payment {
    // common fields of all models
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // data values
    // @todo distinguish one-time buy & subscription
    paymentMethod  PaymentMethodEnum @default(STRIPE)
    status         PaymentStatusEnum @default(PENDING)
    currency       CurrencyEnum
    paidAmount     Int?
    refundedAmount Int?

    // foreign keys and relations
    user          User           @relation(fields: [userId], references: [id])
    userId        String
    balanceLog    BalanceLog?    @relation(fields: [balanceLogId], references: [id])
    balanceLogId  String?        @unique
    product       Product        @relation(fields: [productId], references: [id])
    productId     String
    stripePayment StripePayment?
}

model StripePayment {
    // common fields of all models
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // data values
    paymentIntentId String @unique

    // foreign keys and relations
    payment   Payment @relation(fields: [paymentId], references: [id])
    paymentId String  @unique
}

model Product {
    // common fields of all models
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // data values
    price           Int
    creditAmount    Int
    currency        CurrencyEnum @default(HKD)
    discountPercent Int?
    isHot           Boolean      @default(false)

    // foreign keys and relations
    payments      Payment[]
    stripeProduct StripeProduct?
}

model StripeProduct {
    // common fields of all models
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // data values
    paymentLinkId String @unique
    paymentLink   String

    // foreign keys and relations
    product   Product @relation(fields: [productId], references: [id])
    productId String  @unique
}

model PrivateChat {
    // common fields of all models
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // foreign keys and relations
    adderUser         User          @relation("adderUser", fields: [adderUserId], references: [id])
    adderUserId       String
    addedUser         User          @relation("addedUser", fields: [addedUserId], references: [id])
    addedUserId       String
    chatMessages      ChatMessage[]
    lastMessageSentAt DateTime?

    // @@unique sort from Prisma does not work as expected
    uniqueKey String @unique

    @@index(fields: [adderUserId])
    @@index(fields: [addedUserId])
}

model ChatMessage {
    // common fields of all models
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // data values
    text              String
    imageUrl          String?
    userName          String
    userAvatarUrl     String?
    userGender        GenderEnum
    systemMessageType SystemMessageTypeEnum?
    systemMessageData Json?
    // This id is generated in app to uniquely identify chat message before it reaches our backend
    messageId         String                 @unique @default(uuid())

    // foreign keys and relations
    messageRoom   Room?        @relation(fields: [messageRoomId], references: [id])
    messageRoomId String?
    privateChat   PrivateChat? @relation(fields: [privateChatId], references: [id])
    privateChatId String?
    messageUser   User         @relation(fields: [messageUserId], references: [id])
    messageUserId String
    // Only leave sys message would have logId connected, to prevent duplicated entries from webhook
    messageLog    RoomLog?     @relation(fields: [messageLogId], references: [id])
    messageLogId  String?
    balanceLog    BalanceLog?
    image         Upload?

    @@unique([messageLogId, systemMessageType])
}

model Gift {
    // common fields of all models
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // data values
    name      String
    price     Int
    imageUrl  String
    isEnabled Boolean @default(true)
    charm     Int

    // foreign keys and relations
    giftLogs GiftLog[]
}

model GiftLog {
    // common fields of all models
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // foreign keys and relations
    balanceLog     BalanceLog @relation(fields: [balanceLogId], references: [id])
    balanceLogId   String     @unique
    gift           Gift       @relation(fields: [giftId], references: [id])
    giftId         String
    senderUser     User       @relation("senderUser", fields: [senderUserId], references: [id])
    senderUserId   String
    receiverUser   User       @relation("receiverUser", fields: [receiverUserId], references: [id])
    receiverUserId String
}

model Notification {
    // common fields of all models
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // data values
    text             String
    senderUserId     String
    // @todo deprecated
    senderUserName   String?
    senderUserGender GenderEnum
    avatarUrl        String
    action           NotificationActionEnum

    // foreign keys and relations
    receiverUser   User   @relation("receiverUser", fields: [receiverUserId], references: [id])
    receiverUserId String
}

model PushToken {
    // common fields of all models
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // data values
    token String

    // foreign keys and relations
    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@unique([userId, token])
}
